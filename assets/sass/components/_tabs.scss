///
/// Telemetry by Pixelarity
/// pixelarity.com | hello@pixelarity.com
/// License: pixelarity.com/license
///

/* Tabs */

	.tabs {

		.titles {
			@include vendor('user-select', 'none');
			list-style-type: none;
			margin-bottom: -1px;
			padding-left: 0;

			li {
				@include vendor('transition-property', 'color, background-color');
				@include vendor('transition-duration', '#{_duration(transition)}');
				border-style: solid;
				border-width: 1px 1px 0 0;
				border-color: rgba(144, 144, 144, 0.25);
    		background-color: rgba(144, 144, 144, 0.075);
				display: inline-block;
				font-size: 1rem;
				font-weight: _font(weight-bold);
				padding: 1rem;

				&:first-child {
					border-left-width: 1px;
				}

				&.active {
					padding-top: 1.4rem;
					border-left-width: 1px;
				}

				& + .active {
					border-left-width: 1px;
				}
			}
		}

		.panels {
			padding: 2rem;
			border-style: solid;
			border-width: 1px;
			border-color: rgba(144, 144, 144, 0.25);
		}

		.panel {
			@include vendor('transition', 'opacity #{_duration(transition)} ease-in-out');
			opacity: 0;

			.image {
				margin-bottom: 0;

				img {
					width: 100%;
				}
			}

			&.active {
				opacity: 1;
			}
		}

		@include breakpoint(large) {
			.titles {
				li {
					font-size: 1rem;
				}
			}
		}

		@include breakpoint(xsmall) {
			.titles {
				li {
					font-size: 0.8rem;
					padding: 1rem;

					&.active {
						padding-top: 1rem;
					}
				}
			}
		}

		@include orientation(portrait) {
			.titles {
				@include vendor('display', 'flex');

				li {
					@include vendor('flex-grow', '1');
					@include vendor('flex-shrink', '1');
					text-align: center;

					&.active {
						padding-top: 1rem;
					}
				}
			}
		}
	}

	@mixin color-tabs($p: null) {
		$highlight: _palette($p, highlight);

		.tabs {
			.titles {
				li {
					border-color: _palette($p, border);
					background-color: _palette($p, border-bg);

					&.active {
						background-color: _palette($p, bg);
						border-bottom-color: _palette($p, bg);
						@if $p == $highlight {
							color: _palette($p, fg-bold);
						}
						@else {
							color: _palette($highlight, bg);
						}
					}
				}
			}

			.panels {
				border-color: _palette($p, border);
			}
		}
	}

	@include color-tabs;
